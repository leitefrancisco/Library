/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package library.views;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import library.tableModels.BorrowsTableModel;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import library.controllers.AvailabilityController;
import library.controllers.BookController;
import library.controllers.BorrowController;
import library.controllers.ReaderController;
import library.models.Book;
import library.models.Borrow;
import library.models.Reader;
import library.utils.InvalidFileException;
import library.utils.Sorter;

/**
 * This view is responsible to show all the borrows that are in the memory 
 * @author Francisco
 */
public class Borrows extends javax.swing.JInternalFrame {
    private MainFrame mf;
    private BorrowController bc;
    /**
     * Creates new form BookReturn
     */
    public Borrows(MainFrame mf) {
        this.bc = new BorrowController();
        this.mf = mf;
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        borrowsTable = new javax.swing.JTable();
        btnReturnAll = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        btnSearchBook = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtFieldBookTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtFieldReaderName = new javax.swing.JTextField();
        btnSearchReader = new javax.swing.JButton();
        btnReaderAndBookSearch = new javax.swing.JButton();
        btnClearFilters = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        borrowsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        borrowsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                borrowsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(borrowsTable);

        btnReturnAll.setText("See Only Borrows to Return");
        btnReturnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnAllActionPerformed(evt);
            }
        });

        btnReturn.setText("Return Book");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        btnSearchBook.setText("Search By Book");
        btnSearchBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchBookActionPerformed(evt);
            }
        });

        jLabel2.setText("Search by Book");

        jLabel3.setText("Search By Reader");

        btnSearchReader.setText("Search By Reader Name");
        btnSearchReader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchReaderActionPerformed(evt);
            }
        });

        btnReaderAndBookSearch.setText("Search by Book AND Reader");
        btnReaderAndBookSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReaderAndBookSearchActionPerformed(evt);
            }
        });

        btnClearFilters.setText("Clear Filters");
        btnClearFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFiltersActionPerformed(evt);
            }
        });

        jLabel1.setText("You can sort By Borrow Date");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1571, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtFieldReaderName, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addComponent(txtFieldBookTitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearchReader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSearchBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReaderAndBookSearch)
                .addGap(30, 30, 30)
                .addComponent(btnClearFilters, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                .addComponent(btnReturnAll)
                .addGap(137, 137, 137)
                .addComponent(btnReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(400, 400, 400))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearchBook)
                            .addComponent(jLabel2)
                            .addComponent(txtFieldBookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtFieldReaderName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchReader)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnClearFilters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnReaderAndBookSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                                .addComponent(btnReturnAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        showAllBorrows();
        btnReturn.setEnabled(false);                                                                         
    }//GEN-LAST:event_formInternalFrameOpened
    /**
     * controls what are the options available for each borrow selected
     * @param evt 
     */
    private void borrowsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borrowsTableMouseClicked
        int row = borrowsTable.getSelectedRow(); 
        Borrow b= (Borrow) borrowsTable.getModel().getValueAt(row, 4);
        if(b.getReturnDate()== null){
            btnReturn.setEnabled(true);
        }
        else{
            btnReturn.setEnabled(false);
        }
    }//GEN-LAST:event_borrowsTableMouseClicked
    
    private void btnReturnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnAllActionPerformed
        
        if(btnReturnAll.getText().equals("See Only Borrows to Return")){
            showBorrowsToReturn();
            btnReturnAll.setText("Show All Borrows");
        }
        else{
            showAllBorrows();
            btnReturnAll.setText("See Only Borrows to Return");
        }
        btnReturn.setEnabled(false);
    }//GEN-LAST:event_btnReturnAllActionPerformed
    
    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        int row = borrowsTable.getSelectedRow();
        Borrow borrow = (Borrow) borrowsTable.getModel().getValueAt(row, 4);
        returnBook(borrow);
        
        
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnReaderAndBookSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReaderAndBookSearchActionPerformed
        showBorrowsByBookAndReader();        
    }//GEN-LAST:event_btnReaderAndBookSearchActionPerformed

    private void btnSearchBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchBookActionPerformed
        showBorrowsByBookTitleSearch();
        txtFieldReaderName.setText("");
    }//GEN-LAST:event_btnSearchBookActionPerformed

    private void btnSearchReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchReaderActionPerformed
        showBorrowsByReaderNameSearch();
        txtFieldBookTitle.setText("");
    }//GEN-LAST:event_btnSearchReaderActionPerformed

    private void btnClearFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFiltersActionPerformed
        txtFieldBookTitle.setText("");
        txtFieldReaderName.setText("");
        showAllBorrows();
    }//GEN-LAST:event_btnClearFiltersActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable borrowsTable;
    private javax.swing.JButton btnClearFilters;
    private javax.swing.JButton btnReaderAndBookSearch;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnReturnAll;
    private javax.swing.JButton btnSearchBook;
    private javax.swing.JButton btnSearchReader;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtFieldBookTitle;
    private javax.swing.JTextField txtFieldReaderName;
    // End of variables declaration//GEN-END:variables
    
    /**
     * refresh the table with the model set in the other methods in the class
     * @param model 
     */
    private void setTableModel(BorrowsTableModel model){
        
        Sorter sorter = new Sorter();
        model.setBorrows(sorter.sortBorrowsByBorrowDate(model.getBorrows()));
        borrowsTable.getTableHeader().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int col = borrowsTable.columnAtPoint(e.getPoint());
                if(col==2){
                    model.setBorrows(sorter.sortBorrowsByBorrowDate(model.getBorrows()));
                    borrowsTable.repaint();
                }
            }
        });
        
        borrowsTable.setModel(model);
        borrowsTable.setRowHeight(50);
        borrowsTable.getColumnModel().getColumn(0).setPreferredWidth(10);
        borrowsTable.getColumnModel().getColumn(2).setPreferredWidth(10);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        borrowsTable.removeColumn(borrowsTable.getColumnModel().getColumn(4));
        borrowsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        borrowsTable.repaint();
    }
    /**
     * get all borrows in the system to display in the table
     */
    private void showAllBorrows(){
        
        Borrow[] borrows = bc.getAll();
        
        BorrowsTableModel model = new BorrowsTableModel(borrows);
        setTableModel(model);
    }
    /**
     * get only the borrows that were not returned yet in the memory to display in the table
     */
    private void showBorrowsToReturn(){
        BorrowsTableModel model = new BorrowsTableModel(bc.getBorrowsToReturn());
        setTableModel(model);
    }
    /**
     * calls the borrow controller to return the borrow
     * @param borrow 
     */
    private void returnBook(Borrow borrow)  {
        AvailabilityController ac = new AvailabilityController();
        ReaderController rc = new ReaderController();
        Reader borrowReader = rc.getReaderById(borrow.getReaderId());
        Book book = new BookController().getBookById(borrow.getBookId());
        int n = JOptionPane.showConfirmDialog(this,"Confirm Return? \n\nBOOK: \n"+
                book.getTitle()+" \nFrom:\n "+
                borrowReader.getFullName(),
                "Confirm Return",
                JOptionPane.YES_NO_OPTION);
        if(n==0){
            try {
                
                bc.returnBook(borrow.getId());
                
                if(!ac.getById(borrow.getBookId()).getQueue().isEmpty()){
                    Reader nextInQueue = ac.getById(book.getId()).getQueue().peekFirst();
                    JOptionPane.showMessageDialog(this, "BOOK RETURNED! \n The Next Reader in the Queue for the book :\n" + book.getTitle() + "\n is : \n" + nextInQueue.getFullName() );
                }
                this.repaint();
            } catch (IOException ex) {
                Logger.getLogger(Borrows.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidFileException ex) {
                Logger.getLogger(Borrows.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }
    /**
    *get borrow in the memory by the book title
    */
    private void showBorrowsByBookTitleSearch(){
        Borrow[] borrows = bc.getBorrowsByBookTitle(txtFieldBookTitle.getText());
        if(borrows.length==0){
            JOptionPane.showMessageDialog(this, "Error : No Borrows Found");
        }
        else{
            
            
            
            
            BorrowsTableModel model = new BorrowsTableModel(borrows);
            setTableModel(model);
        }
    }
    /**
     * get borrows in the memory by the reader name
     */
    private void showBorrowsByReaderNameSearch(){
        Borrow[] borrows = bc.getBorrowsByReaderName(txtFieldReaderName.getText());
        if(borrows.length==0){
            JOptionPane.showMessageDialog(this, "Error : No Borrows Found");
        }
        else{
            
            
            BorrowsTableModel model = new BorrowsTableModel(borrows);
            setTableModel(model);
        }
    }
    /**
     * get borrows by the book title and the reader name
     */
    private void showBorrowsByBookAndReader() {
         Borrow[] borrows = bc.getBorrowsByBookAndReader(txtFieldBookTitle.getText(),txtFieldReaderName.getText());
        if(borrows.length==0){
            JOptionPane.showMessageDialog(this, "Error : No Borrows Found");
        }
        else{
            
            
            BorrowsTableModel model = new BorrowsTableModel(borrows);
            setTableModel(model);
        }
    }
    
}
