/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package library.views;

import library.tableModels.ReadersTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import library.controllers.AvailabilityController;
import library.controllers.BookController;
import library.controllers.ReaderController;
import library.models.Book;
import library.models.Reader;
import library.utils.AlreadyInQueueException;
import library.utils.AlreadyWithTheBookException;
import library.utils.InvalidFileException;
import library.utils.Sorter;

/**
 * this class will show the available readers to add in the queue for the book receive in this class
 * @author Francisco
 */
public class ReadersToAddInQueue extends javax.swing.JInternalFrame {
    
    /**
     * Creates new form ReadersToAddInQueue
     */
    private Book book;
    private MainFrame mf;
    private ReaderController rc = new ReaderController();
    public ReadersToAddInQueue(MainFrame mf, Book book) {
        
        this.mf = mf;
        this.book = book;
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblHead = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        readersTable = new javax.swing.JTable();
        btnAddToQueue = new javax.swing.JButton();

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblHead.setText("jLabel1");

        readersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(readersTable);

        btnAddToQueue.setText("Add to Queue");
        btnAddToQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToQueueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBack)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1420, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(lblHead, javax.swing.GroupLayout.PREFERRED_SIZE, 772, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(185, 185, 185)
                        .addComponent(btnAddToQueue, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblHead, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(btnAddToQueue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBack)
                .addGap(46, 46, 46))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed
    
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        lblHead.setText(" Selec Reader to Enqueue for Book : "+book.getTitle());
        showAllReaders();
    }//GEN-LAST:event_formInternalFrameOpened

    private void btnAddToQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToQueueActionPerformed
        if(getSelectedReader().getActive().equals("0")){
            JOptionPane.showMessageDialog(this, "This Reader is inactive, please go to Readers Search and Activate him/her");
        }
        else{
            int n = JOptionPane.showConfirmDialog(this,"Add "+getSelectedReader().getFullName() + " to the queue?",
                    "Confirm Enqueue",
                    JOptionPane.YES_NO_OPTION);
            if(n==0){
                try {
                    AvailabilityController ac = new AvailabilityController();
                    ac.addReaderToQueue(book.getId(), getSelectedReader().getId());
                    JOptionPane.showMessageDialog(this,getSelectedReader().getFullName() +" Was added in the Queue for the book "+ book.getTitle());
                    this.mf.goHome();
                } catch (IOException ex) {
                    Logger.getLogger(ReadersToAddInQueue.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvalidFileException ex) {
                    Logger.getLogger(ReadersToAddInQueue.class.getName()).log(Level.SEVERE, null, ex);
                } catch (AlreadyInQueueException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                    Logger.getLogger(ReadersToAddInQueue.class.getName()).log(Level.SEVERE, null, ex);
                } catch (AlreadyWithTheBookException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                    Logger.getLogger(ReadersToAddInQueue.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        }
    }//GEN-LAST:event_btnAddToQueueActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToQueue;
    private javax.swing.JButton btnBack;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblHead;
    private javax.swing.JTable readersTable;
    // End of variables declaration//GEN-END:variables
    
    /**
     * set the model to the table
     * @param model
     */
    private void setTableModel(ReadersTableModel model){
        
        Sorter sorter = new Sorter();
        model.setReaders(sorter.sortReadersByName(model.getReaders()));
        readersTable.getTableHeader().addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent e) {
                
                int col = readersTable.columnAtPoint(e.getPoint());
                
                if(col==0){
                    model.setReaders(sorter.sortReadersByName(model.getReaders()));
                    readersTable.repaint();
                }
            }
        });
        readersTable.setModel(model);
        readersTable.setRowHeight(50);
        readersTable.getColumnModel().getColumn(0).setPreferredWidth(10);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        readersTable.removeColumn(readersTable.getColumnModel().getColumn(3));
        readersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        readersTable.repaint();
    }
    /**
     *get all the readers in memory and add them to the queue
     */
    private void showAllReaders() {
        
        Reader[]readers = rc.getAll();
        ReadersTableModel model = new ReadersTableModel(readers);
        setTableModel(model);
        if(readers.length==0){
            JOptionPane.showMessageDialog(this, "No Readers Registered");
        }
    }
    /**
     * returns the reader selected in the table
     */
    private Reader getSelectedReader() {
        return (Reader) readersTable.getModel().getValueAt(readersTable.getSelectedRow(), 3);
    }
    
    
}
