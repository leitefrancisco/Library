/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package library.views;

import library.tableModels.ReadersTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import library.controllers.ReaderController;
import library.utils.Sorter;
import library.models.Reader;
import library.utils.InvalidFileException;

/**
 * This class will show the readers in the system
 * @author Francisco
 */
public class ReaderSearch extends javax.swing.JInternalFrame {
    
    /**
     * Creates new form ReadersList
     */
    
    MainFrame mf;
    private ReaderController rc;
    public ReaderSearch(MainFrame mf) {
        
        this.mf = mf;
        this.rc = new ReaderController();
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnSearchName = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        readersTable = new javax.swing.JTable();
        btnReaderBorrows = new javax.swing.JButton();
        btnEditReader = new javax.swing.JButton();
        btnToggleActive = new javax.swing.JButton();
        btnShowAllReaders = new javax.swing.JButton();
        btnDeactivateReader = new javax.swing.JButton();

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Search Name:");

        btnSearchName.setText("Serach By Name");

        readersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        readersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                readersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(readersTable);

        btnReaderBorrows.setText("See Selected Reader Borrows");
        btnReaderBorrows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReaderBorrowsActionPerformed(evt);
            }
        });

        btnEditReader.setText("Edit Reader");
        btnEditReader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditReaderActionPerformed(evt);
            }
        });

        btnToggleActive.setText("See only Active Readers");
        btnToggleActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToggleActiveActionPerformed(evt);
            }
        });

        btnShowAllReaders.setText("See All Readers");
        btnShowAllReaders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAllReadersActionPerformed(evt);
            }
        });

        btnDeactivateReader.setText("Deactivate Reader");
        btnDeactivateReader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeactivateReaderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(btnSearchName)
                .addGap(169, 169, 169)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnReaderBorrows, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditReader, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnShowAllReaders, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnToggleActive))
                .addGap(29, 29, 29)
                .addComponent(btnDeactivateReader)
                .addContainerGap(64, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(btnSearchName)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnReaderBorrows)
                                .addComponent(btnShowAllReaders)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEditReader)
                            .addComponent(btnToggleActive)))
                    .addComponent(btnDeactivateReader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 15, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                .addGap(44, 44, 44))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
    
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        
        btnDeactivateReader.setEnabled(false);
        showAllReaders();
    }//GEN-LAST:event_formInternalFrameOpened
    
    private void btnReaderBorrowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReaderBorrowsActionPerformed
       int row = readersTable.getSelectedRow();
        if(row != -1){
        Reader r = getSelectedReader();
        this.mf.showReaderBorrowHistoric(r);
        }
        else{
            JOptionPane.showMessageDialog(this, "Please Select a Reader", "No Reader Selected",1);
        }
    }//GEN-LAST:event_btnReaderBorrowsActionPerformed
    /**
     * controls the available options for the selected reader in the table
     * @param evt 
     */
    private void readersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_readersTableMouseClicked
        
        Reader r= getSelectedReader();
        btnDeactivateReader.setEnabled(true);
        if(r.getActive().equals("1")){
            btnDeactivateReader.setText("Deactivate Reader");
        }
        else{
            btnDeactivateReader.setText("Activate Reader");
        }
    }//GEN-LAST:event_readersTableMouseClicked
    /**
     * opens the Reader edit view
     * @param evt 
     */
    private void btnEditReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditReaderActionPerformed
        if(readersTable.getSelectedRow()!=-1){
            Reader r = getSelectedReader();
            this.mf.showReaderEdit(r);  
        }
        else{
            JOptionPane.showMessageDialog(this, "Please Select a Reader", "No Reader Selected",1);
        }
    }//GEN-LAST:event_btnEditReaderActionPerformed
    /**
     * determine what is the action of the button depending on the view and the text of the button
     * @param evt 
     */
    private void btnToggleActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToggleActiveActionPerformed
        if(btnToggleActive.getText().equals("See only Active Readers")){
            showActiveReaders();
            btnToggleActive.setText("See only Inactive Readers");
        }
        
        else{
            showInactiveReaders();
            btnToggleActive.setText("See only Active Readers");
        }
        btnDeactivateReader.setEnabled(false);
    }//GEN-LAST:event_btnToggleActiveActionPerformed
    private void btnShowAllReadersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAllReadersActionPerformed
        showAllReaders();
        btnToggleActive.setText("See only Active Readers");
        btnDeactivateReader.setEnabled(false);
    }//GEN-LAST:event_btnShowAllReadersActionPerformed
    /**
     * activate or deactivate reader depending on the current active condition of it
     * @param evt 
     */
    private void btnDeactivateReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeactivateReaderActionPerformed
        try{
            if(getSelectedReader().getActive().equals("1")){
                int n = JOptionPane.showConfirmDialog(this,"Confirm Deactivation of "+
                        getSelectedReader().getFullName()+" ?",
                        "Confirm Deactivation",
                        JOptionPane.YES_NO_OPTION);
                if(n==0){
                    rc.deactivateReader(getSelectedReader());
                    this.repaint();
                }
            }
            else if (getSelectedReader().getActive().equals("0")){
                int n = JOptionPane.showConfirmDialog(this,"Confirm Activation of "+
                        getSelectedReader().getFullName()+" ?",
                        "Confirm Activation",
                        JOptionPane.YES_NO_OPTION);
                if(n==0){
                    rc.activateReader(getSelectedReader());
                    this.repaint();
                }
            }
        }catch (IOException | InvalidFileException ex) {
            Logger.getLogger(ReaderSearch.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeactivateReaderActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeactivateReader;
    private javax.swing.JButton btnEditReader;
    private javax.swing.JButton btnReaderBorrows;
    private javax.swing.JButton btnSearchName;
    private javax.swing.JButton btnShowAllReaders;
    private javax.swing.JButton btnToggleActive;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable readersTable;
    // End of variables declaration//GEN-END:variables
    /**
     * set the model to the table refreshing the view for the user
     * @param model 
     */
    private void setTableModel(ReadersTableModel model){
        
        Sorter sorter = new Sorter();
        model.setReaders(sorter.sortReadersByName(model.getReaders()));
        readersTable.getTableHeader().addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent e) {
                
                int col = readersTable.columnAtPoint(e.getPoint());
                
                if(col==0){
                    model.setReaders(sorter.sortReadersByName(model.getReaders()));
                    readersTable.repaint();
                }
            }
        });
        readersTable.setModel(model);
        readersTable.setRowHeight(50);
        readersTable.getColumnModel().getColumn(0).setPreferredWidth(10);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        readersTable.removeColumn(readersTable.getColumnModel().getColumn(3));
        readersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        readersTable.repaint();
    }
    /**
     * get all the readers in the memory and adds to the table
     */
    private void showAllReaders() {
        Reader[]readers = rc.getAll();
        ReadersTableModel model = new ReadersTableModel(readers);
        setTableModel(model);
        if(readers.length==0){
            JOptionPane.showMessageDialog(this, "No Readers Registered");
        }
    }
    /**
     * get only the active the readers in the memory and adds to the table
     */
    private void showActiveReaders() {
        Reader[]readers = rc.getActiveReaders();
        ReadersTableModel model = new ReadersTableModel(readers);
        setTableModel(model);
        if(readers.length==0){
            JOptionPane.showMessageDialog(this, "No Readers");
        }
    }
     /**
     * get only the inactive the readers in the memory and adds to the table
     */
    private void showInactiveReaders() {
        Reader[]readers = rc.getInactiveReaders();
        if(readers.length==0){
            JOptionPane.showMessageDialog(this, "No Readers");
        }
        ReadersTableModel model = new ReadersTableModel(readers);
        setTableModel(model);
    }
    /**
     * returns the selected reader in the table 
     */
    private Reader getSelectedReader(){
        int row = readersTable.getSelectedRow();
        return (Reader) readersTable.getModel().getValueAt(row, 3);
    }   
}
